import React from 'react';
import { getByRole, getByText, screen } from '@testing-library/react';
import renderWithRouter from '../types/renderWithRouter';
import Pokedex from '../components/Pokedex';
import App from '../App';
import userEvent from '@testing-library/user-event';
import Pokemon from '../components/Pokemon';

describe('Testando o componente App.js', () => {
  test('Verifica se renderiza o texto Encountered pokémons em h2', () => {
    const { history } = renderWithRouter(<App />);
    const tagH2 = screen.getByRole('heading', { level: 2 });
    expect(tagH2).toBeInTheDocument();
    expect(tagH2).toHaveTextContent('Encountered pokémons');
    const url = history.location.pathname;
    expect(url).toBe('/');
  });
  test('Verifica se é exibido o próximo pokémon ao quando botão específico é clicado', () => {
    const { history } = renderWithRouter(<App />);
    const nextPokemon = screen.getByTestId('next-pokemon');
    userEvent.click(nextPokemon);
    const charmander = screen.getByText('Charmander');
    expect(charmander).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const caterpie = screen.getByText('Caterpie');
    expect(caterpie).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const ekans = screen.getByText('Ekans');
    expect(ekans).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const alakazam = screen.getByText('Alakazam');
    expect(alakazam).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const mew = screen.getByText('Mew');
    expect(mew).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const rapidash = screen.getByText('Rapidash');
    expect(rapidash).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const snorlax = screen.getByText('Snorlax');
    expect(snorlax).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const dragonair = screen.getByText('Dragonair');
    expect(dragonair).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const pikachu = screen.getByText('Pikachu');
    expect(pikachu).toBeInTheDocument();
    const url = history.location.pathname;
    expect(url).toBe('/');
  });
  test('Verifica se é mostrado apenas um Pokémon por vez', () => {
    const { history } = renderWithRouter(<App />);
    const nextPokemon = screen.getByTestId('next-pokemon');
    expect(nextPokemon).toBeInTheDocument();
    userEvent.click(nextPokemon);
    const pokemonName = screen.getAllByTestId('pokemon-name');
    expect(pokemonName.length).toBe(1);
    const url = history.location.pathname;
    expect(url).toBe('/');
  });
  test('Verifica se a Pokédex tem os botões de filtro', () => {
    const { history } = renderWithRouter(<App />);
    const allButtons = screen.getAllByTestId('pokemon-type-button');
    expect(allButtons.length).toBe(7); 
    const allButton = screen.getByRole('button', { name: 'All' });
    expect(allButton).toBeInTheDocument();
    userEvent.click(allButton);
    const pikachu = screen.getByText('Pikachu');
    expect(pikachu).toBeInTheDocument();
    const electricButton = screen.getByRole('button', { name: 'Electric' });
    expect(electricButton).toBeInTheDocument();
    userEvent.click(allButton);
    expect(pikachu).toBeInTheDocument();
    const fireButton = screen.getByRole('button', { name: 'Fire' });
    expect(fireButton).toBeInTheDocument();
    userEvent.click(fireButton);
    const charmander = screen.getByText('Charmander');
    expect(charmander).toBeInTheDocument();
    const bugButton = screen.getByRole('button', { name: 'Bug' });
    expect(bugButton).toBeInTheDocument();
    userEvent.click(bugButton);
    const caterpie = screen.getByText('Caterpie');
    expect(caterpie).toBeInTheDocument();
    const poisonButton = screen.getByRole('button', { name: 'Poison' });
    expect(poisonButton).toBeInTheDocument();
    userEvent.click(poisonButton);
    const ekans = screen.getByText('Ekans');
    expect(ekans).toBeInTheDocument();
    const psychicButton = screen.getByRole('button', { name: 'Psychic' });
    expect(psychicButton).toBeInTheDocument();
    userEvent.click(psychicButton);
    const alakazam = screen.getByText('Alakazam');
    expect(alakazam).toBeInTheDocument();
    const normalButton = screen.getByRole('button', { name: 'Normal' });
    expect(normalButton).toBeInTheDocument();
    userEvent.click(normalButton);
    const snorlax = screen.getByText('Snorlax');
    expect(snorlax).toBeInTheDocument();
    const dragonButton = screen.getByRole('button', { name: 'Dragon' });
    expect(dragonButton).toBeInTheDocument();
    userEvent.click(dragonButton);
    const dragonair = screen.getByText('Dragonair');
    expect(dragonair).toBeInTheDocument();
    const url = history.location.pathname;
    expect(url).toBe('/');
  });
  test('Verifica se a Pokédex contém um botão para resetar o filtro', () => {
    const { history } = renderWithRouter(<App />);
    const allButton = screen.getByRole('button', { name: 'All' });
    expect(allButton).toBeInTheDocument();
    const nextPokemon = screen.getByTestId('next-pokemon');
    expect(nextPokemon).toBeInTheDocument();
    userEvent.click(allButton);
    const pokemonName = screen.getAllByTestId('pokemon-name');
    expect(pokemonName.length).toBe(1);
    const url = history.location.pathname;
    expect(url).toBe('/');
  });
});
